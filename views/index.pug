doctype html
html
  head
    // Import Google Icon Font
    link(href='https://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    // Compiled and minified CSS
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css')
    // Let browser know website is optimized for mobile
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
  body
    .container
      form.row(action='#')
        .input-field.col.s12.l4(style='margin-top: 2rem; margin-left: 1rem;')
          select#activeSubstance
            option(value='', selected='') None
            option(value='1') Palbociclib
            option(value='2') Morphine
            option(value='2') Fentanyl
          label Active Substance Focused
        .switch
          label#rlabel.col.s12(style='font-weight: bold; font-size: larger; color: steelblue;')
            input#retrospective(type='checkbox')
            span.lever
            | Retrospective
          label#wlabel.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
            input#wardfocused(type='checkbox')
            span.lever
            | Ward Focused
          label#ilabel.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
            input#indicationfocused(type='checkbox')
            span.lever
            | Indication Focused
          //  
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Active Substance Focused
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Includes Economic Outcomes
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Requires Physician Collaboration
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Pharmacogenetics Focused

      .row(style='margin-top: 2rem;')
        a#search.col.waves-effect.waves-light.btn
          | Search
          i.material-icons.right search
    .container
      #resultRow.row(style='margin-top: 2rem; display: none;')
        #resultText.col.s12.p(style= 'font-size: large;')
        h3.col.s12(style='margin-top: 1rem; font-weight: bold; color: #900C3F;') Results
        ol#resultList
    // Compiled and minified JavaScript
    script(src='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js')
    script(src='https://code.jquery.com/jquery-3.4.1.min.js', integrity='sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=', crossorigin='anonymous')
    script.
      M.AutoInit();
    script.
      // GET JSON DATA
      var dataReq = new XMLHttpRequest();
      var url = "data/data.json";
      dataReq.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
      console.log('Data loaded with success!');
      }
      };
      dataReq.open("GET", url, true);
      dataReq.send();
    script.
      // SET EMPTY FILTER ARRAY
      let filterArr = [false, false, false, ""];
      let myData;
      var searchObj = new Object();
      let result;
      let string;
      // MODIFY FILTER ARRAY WITH SPAN.LEVERs
      $( "#retrospective" ).click(function() {
      if (filterArr[0] === false) {
      filterArr[0] = true;
      } else {
      filterArr[0] = false;
      }
      });
      $( "#wardfocused" ).click(function() {
      if (filterArr[1] === false) {
      filterArr[1] = true;
      } else {
      filterArr[1] = false;
      }
      });
      $( "#indicationfocused" ).click(function() {
      if (filterArr[2] === false) {
      filterArr[2] = true;
      } else {
      filterArr[2] = false;
      }
      });

      $("#search").click(function() {
      // ERASE THE PREV RESULT TEXT
      $('#resultList').text('');
      let actSubs = $("#activeSubstance :selected").text();
      // CLEAR THE SEARCH OBJECT / ADD LIST PARAMETERS (ACTSUBS) FOR NEW SEARCH
      searchObj = {
      title: "",
      url: "",
      retrospective: [2],
      ward_focused: [2],
      indication_focused: [2],
      active_substance: [actSubs],
      };
      // DESTROY ACTSUBS IF NONE IS SELECETED
      if (actSubs === "None") {
      searchObj['active_substance'] = "";  
      }
      // MIRROR THE FULL DATA ON THE CONSOLE
      let myData = JSON.parse(dataReq.responseText);
      console.log(myData);
      // SET THE NEW SEARCH DATA ACCORDING TO THE FILTER DATA
      if (filterArr[0] === true) {
      searchObj['retrospective'] = [1];
      }
      if (filterArr[1] === true) {
      searchObj['ward_focused'] = [1];
      }
      if (filterArr[2] === true) {
      searchObj['indication_focused'] = [1];
      }

      // filterPlainFunction starts
      // ignores case-sensitive
      const getValue = value => (typeof value === 'string' ? value.toUpperCase() : value);

      /**
      * Filters an array of objects (one level-depth) with multiple criteria.
      *
      * @param  {Array}  array: the array to filter
      * @param  {Object} filters: an object with the filter criteria
      * @return {Array}
      */
      function filterPlainArray(array, filters) {
      const filterKeys = Object.keys(filters);
      return array.filter(item => {
      // validates all filter criteria
      return filterKeys.every(key => {
      // ignores an empty filter
      if (!filters[key].length) return true;
      return filters[key].find(filter => getValue(filter) === getValue(item[key]));
      });
      });
      }
      
      result = filterPlainArray(myData, searchObj);
      console.log(result);
      let resultLength = result.length;
      $("#resultText").html(`We have found ${resultLength} result(s)`);
      $('#resultRow').attr('style','display: default;');
      for (let key in result) {
      let value = result[key];
      console.log(value.title);
      }
      result.forEach(function(item) {
      var li = document.createElement("li");
      var text = `<a href='${item.url}' target='_blank'> ${item.title}</a>`;
      li.innerHTML = text;
      document.getElementById("resultList").appendChild(li);
      });
      });

    script.
      /**
      * Filters an array of objects by custom predicates.
      *
      * @param  {Array}  array: the array to filter
      * @param  {Object} filters: an object with the filter criteria
      * @return {Array}
      */
      function filterArray(array, filters) {
      const filterKeys = Object.keys(filters);
      return array.filter(item => {
      // validates all filter criteria
      return filterKeys.every(key => {
      // ignores non-function predicates
      if (typeof filters[key] !== 'function') return true;
      return filters[key](item[key]);
      });
      });
      }
      
      const products = [
      { name: 'A', color: 'Blue', size: 50, locations: ['USA', 'Europe'], details: { length: 20, width: 70 } },
      { name: 'B', color: 'Blue', size: 60, locations: [], details: { length: 20, width: 70 } },
      { name: 'C', color: 'Black', size: 70, locations: ['Japan'], details: { length: 20, width: 71 } },
      { name: 'D', color: 'Green', size: 50, locations: ['USA'], details: { length: 20, width: 71 } },
      ];

      const filters = {
      size: size => size === 50 || size === 70,
      color: color => ['blue', 'black'].includes(color.toLowerCase()),
      locations: locations => locations.find(x => ['JAPAN', 'USA'].includes(x.toUpperCase())),
      details: details => details.length < 30 && details.width >= 70,
      };

      const filtered = filterArray(products, filters);