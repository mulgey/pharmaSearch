doctype html
html
  head
    // Import Google Icon Font
    link(href='https://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    // Compiled and minified CSS
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css')
    // Let browser know website is optimized for mobile
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
  body
    .container
      form.row(action='#')
        .switch
          label#rlabel.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
            input#retrospective(type='checkbox')
            span.lever
            | Retrospective
          label#wlabel.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
            input#wardfocused(type='checkbox')
            span.lever
            | Ward Focused
          label#ilabel.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
            input#indicationfocused(type='checkbox')
            span.lever
            | Indication Focused
          //  
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Active Substance Focused
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Includes Economic Outcomes
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Requires Physician Collaboration
            label.col.s12(style='margin-top: 1rem; font-weight: bold; font-size: larger; color: steelblue;')
              input(type='checkbox')
              span.lever
              | Pharmacogenetics Focused
      .row(style='margin-top: 2rem;')
        a#search.col.waves-effect.waves-light.btn
          | Search
          i.material-icons.right search
    // Compiled and minified JavaScript
    script(src='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js')
    script(src='https://code.jquery.com/jquery-3.4.1.min.js', integrity='sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=', crossorigin='anonymous')
    script.
      M.AutoInit();
    script.
      var dataReq = new XMLHttpRequest();
      var url = "data/data.json";
      dataReq.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
      console.log('Data loaded with success!');
      } else {
      console.log('Data was not loaded');  
      }
      };
      dataReq.open("GET", url, true);
      dataReq.send();
    //
      script.
        var filterReq = new XMLHttpRequest();
        var url = "data/filter.json";
        filterReq.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
        console.log('Filter loaded with success!');
        } else {
        console.log('Filter was not loaded');  
        }
        };
        filterReq.open("GET", url, true);
        filterReq.send();
    script.
      let filterArr = [false, false, false];
      $( "#retrospective" ).click(function() {
      if (filterArr[0] === false) {
      filterArr[0] = true;
      } else {
      filterArr[0] = false;
      }
      });
      $( "#wardfocused" ).click(function() {
      if (filterArr[1] === false) {
      filterArr[1] = true;
      } else {
      filterArr[1] = false;
      }
      });
      $( "#indicationfocused" ).click(function() {
      if (filterArr[2] === false) {
      filterArr[2] = true;
      } else {
      filterArr[2] = false;
      }
      });
      let data;
      var searchObj;
      $("#search").click(function() {
      let data = JSON.parse(dataReq.responseText);
      console.log(data);
      var searchObj;
      if (filterArr[0] === true) {
      searchObj[retrospective] = true;
      }
      if (filterArr[1] === true) {
      searchObj[ward_focused] = true;
      }
      if (filterArr[2] === true) {
      searchObj[indication_focused] = true;
      }
      console.log(searchObj);
      });
    script.
      /**
      * Filters an array of objects by custom predicates.
      *
      * @param  {Array}  array: the array to filter
      * @param  {Object} filters: an object with the filter criteria
      * @return {Array}
      */
      function filterArray(array, filters) {
        const filterKeys = Object.keys(filters);
        return array.filter(item => {
            // validates all filter criteria
            return filterKeys.every(key => {
                // ignores non-function predicates
                if (typeof filters[key] !== 'function') return true;
                return filters[key](item[key]);
            });
        });
      }

      const products = [
        { name: 'A', color: 'Blue', size: 50, locations: ['USA', 'Europe'], details: { length: 20, width: 70 } },
        { name: 'B', color: 'Blue', size: 60, locations: [], details: { length: 20, width: 70 } },
        { name: 'C', color: 'Black', size: 70, locations: ['Japan'], details: { length: 20, width: 71 } },
        { name: 'D', color: 'Green', size: 50, locations: ['USA'], details: { length: 20, width: 71 } },
      ];

      const filters = {
          size: [50, 70],
          color: ['blue', 'black'],
          locations: ['JAPAN', 'USA'],
          // details: details.length < 30 && details.width >= 70
      };

      const filtered = filterArray(products, filters);