doctype html
html
    head
      // Import Google Icon Font
      link(href='https://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
      // Compiled and minified CSS
      link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css')
      // My very own great CSS
      link(rel='stylesheet', href='css/style.css')
      // Let browser know website is optimized for mobile
      meta(name='viewport', content='width=device-width, initial-scale=1.0')
    body
      include includes/header.pug
      main
        .container
          .row#users(style="margin-top: 3rem;")
            // class="search" automagically makes an input a search field.
            input.search.col.s12(style="margin-bottom: 2rem;" placeholder='Search')
            // class="sort" automagically makes an element a sort buttons. The date-sort value decides what to sort by.
            div
              a.waves-effect.waves-light.btn-small.sort.col.s12.m3.offset-m1(style="margin-top: 2rem; background-color: steelblue;", data-sort='name')
                | Sort by Name
              // class="sort" automagically makes an element a sort buttons. The date-sort value decides what to sort by.
              a.waves-effect.waves-light.btn-small.sort.col.s12.m3.offset-m1(style="margin-top: 2rem; background-color: steelblue;", data-sort='country')
                | Sort by Country
              // class="sort" automagically makes an element a sort buttons. The date-sort value decides what to sort by.
              a.waves-effect.waves-light.btn-small.sort.col.s12.m3.offset-m1(style="margin-top: 2rem; background-color: steelblue;", data-sort='year')
                | Sort by Year
            // Child elements of container with class="list" becomes list items
            ul#root.list.col.s12(style="margin-bottom: 4rem;")
            ul.pagination.col.s12
      include includes/footer.pug
    // Compiled and minified JavaScript
    script(src='https://code.jquery.com/jquery-3.4.1.min.js', integrity='sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=', crossorigin='anonymous')
    script(src='js/jquery.paginate.js')
    script(src='//cdnjs.cloudflare.com/ajax/libs/list.js/1.5.0/list.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js')
    // FUNDEMENTALS
    script.
      M.AutoInit();
      // GET JSON DATA
      var dataReq = new XMLHttpRequest();
      var url = "protected/data/data.json";
      dataReq.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
      console.log('Data loaded with success!');
      }
      };
      dataReq.open("GET", url, true);
      dataReq.send();
      // ONCE THE CURSOR MOVED
      $( "body" ).one('mouseover', function() {
        // FOOT SLIDER DATA
        setTimeout(function() { 
        let slideData = JSON.parse(dataReq.responseText);
        let actLength = (($('#actSubs > option').length) - 1);
        let wardLength = (($('#ward > option').length) - 1);
        let countryLength = (($('#country > option').length) - 1);
        document.getElementById("slider").innerHTML = `${slideData.length} studies in our database are ready! With ${actLength} different active substances, ${wardLength} different ward options and among ${countryLength} countries; you may perform your search`;
        // FOOT SLIDER DATA ENDS

        // LOAD THE DATA TO THE myData VARIABLE
        let myData = JSON.parse(dataReq.responseText);
        // SET EMPTY SEARCH OBJECT FOR THE FULL LIST
        searchObj = {
          actSubs: [],
          indication: [],
          statedClass: [],
          studyDesign: [],
          setting: [],
          ward: [],
          numPatients: [],
          numPrescriptions: [],
          studyLength: [],
          criteriaMethod: [],
          country: [],
          year: [],
          pediatrics: [],
          geriatrics: [],
          neonatology: [],
          oncology: [],
          pharmacogenetics: [],
          pharmacoeconomy: [],
          radiopharmaceuticals: [],
          compounding: [],
          medicalDevices: [],
          personalized: [],
          nutrition: [],
          highRisk: [],
          endOfLife: [],
          selfMedication: [],
          preopMedication: [],
          outpatient: [],
          enzymeSubstrate: [],
          geneTherapy: [],
          homeCare: [],
          antibioticProphylaxis: [],
          painManagement: [],
          offLabel: [],
          flatDoses: [],
          switching: [],
          deprescribing: [],
          prepareIV: [],
          costAnalysis: [],
          riskSafety: [],
          vigilance: [],
          stability: [],
          drugMonitoring: [],
          safetyProfile: [],
          intervention: [],
          patientIntervention: [],
          nursesReccomend: [],
          questPatient: [],
          questProfessional: [],
          selection: [],
          stock: [],
          autoDispensing: [],
          coldChain: [],
          softwareAided: [],
          mobileVR: [],
          Printing3D: [],
          socialMedia: [],
          shortages: [],
          adverseEvents: [],
          adherence: [],
          resistance: [],
          renal: [],
          errors: [],
          administrative: [],
          stewardship: [],
          policiesAudits: [],
          multidisciplinary: [],
          institutional: [],
          recalls: [],
          education: [],
          clinicalTrials: [],
          youngPharma: [],
          nextStep: []
        };
        // LET THE CODE DO THE MAGIC
        const filterEngine = Object.values(searchObj).flat();

        let result = myData.filter(({filters}) => {
          const objFilters = Object.values(filters).flat();
          return filterEngine.every(val => objFilters.includes(val));
        });

        // WE WANT RESULTS COME AS "A TO Z"
        function sort(valuePath, array) {
          let path = valuePath.split('.');
          let value = getType(array[0],path);
          
          if (value == 'string') {
            return array.sort((a, b) => (getValue(a,path).toUpperCase() > getValue(b,path).toUpperCase()) - (getValue(a,path).toUpperCase() < getValue(b,path).toUpperCase()))
          } else {
            return array.sort((a, b) => getValue(b,path) -  getValue(a,path));
          }
        
          function getValue(obj, path) {
            path.forEach(path => obj = obj[path])
            return obj;
          }
        
          function getType(obj, path) {
            path.forEach(path => obj = obj[path])
            return typeof obj;
          }
        }
        result = sort('title', result);

        // PREPARE THE LIST, APPEND TO RESULTLIST SECTION
        result.forEach(function(item) {
        var li = document.createElement("li");
        var text = `<h5 style="margin-top: 3rem;" class="name"><a href="${item.url}" target="_blank">${item.title}</a></h4><p class="institution">${item.institution}</p><p class="country">${item.filters.country}</p><p class="year">${item.filters.year}</p>`;
        li.innerHTML = text;
        document.getElementById("root").appendChild(li);
        });
        // LISTJS
        let options = {
          valueNames: [ 'name', 'year', 'country' ],
          page: 10,
          pagination: true
        };
        let listObj = new List('users', options);
        }, 500);
      });
